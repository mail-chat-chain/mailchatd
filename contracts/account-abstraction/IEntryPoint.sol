// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.20;

import "./UserOperation.sol";

/**
 * The interface for the EntryPoint contract.
 * This defines the EIP-4337 EntryPoint specification.
 */
interface IEntryPoint {
    /**
     * Return information about the account and paymaster validation
     */
    struct ReturnInfo {
        uint256 preOpGas;
        uint256 prefund;
        bool sigFailed;
        uint256 validAfter;
        uint256 validUntil;
        bytes paymasterContext;
    }

    /**
     * Returned aggregated signature info
     */
    struct AggregatorStakeInfo {
        address aggregator;
        StakeInfo stakeInfo;
    }

    /**
     * Stake information about an entity (account, paymaster, aggregator)
     */
    struct StakeInfo {
        uint256 stake;
        uint256 unstakeDelaySec;
    }

    /**
     * Validation result for simulateValidation
     */
    struct ValidationResult {
        ReturnInfo returnInfo;
        StakeInfo senderInfo;
        StakeInfo factoryInfo;
        StakeInfo paymasterInfo;
        AggregatorStakeInfo aggregatorInfo;
    }

    /**
     * Execute a batch of UserOperations.
     * @param ops - array of operations to execute.
     * @param beneficiary - the address to receive the payment.
     */
    function handleOps(
        UserOperation[] calldata ops,
        address payable beneficiary
    ) external;

    /**
     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.
     * @param userOp - the operation to validate.
     */
    function simulateValidation(
        UserOperation calldata userOp,
        address target,
        bytes calldata targetCallData
    ) external returns (ValidationResult memory);

    /**
     * Get the hash of a UserOperation
     * @param userOp - the UserOperation to hash
     * @return userOpHash - the hash of the UserOperation
     */
    function getUserOpHash(UserOperation calldata userOp)
        external
        view
        returns (bytes32);

    /**
     * Get counterfactual sender address.
     * Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.
     * @param initCode - the constructor code to be passed to the UserOperation.
     */
    function getSenderAddress(bytes memory initCode)
        external
        view
        returns (address);

    /**
     * Add stake for the calling entity.
     * @param unstakeDelaySec - the unstake delay for the entity. Can only be increased.
     */
    function addStake(uint32 unstakeDelaySec) external payable;

    /**
     * Unlock the stake, in order to withdraw it.
     * The entity can't serve requests once unlocked, until it calls addStake again
     */
    function unlockStake() external;

    /**
     * Withdraw the stake.
     * Must first call unlockStake and wait for the unstakeDelaySec to pass
     * @param withdrawAddress - the address to send withdrawn value.
     */
    function withdrawStake(address payable withdrawAddress) external;

    /**
     * Get deposit info.
     * @param account - the account to query.
     * @return deposit - the entity's deposit.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * Add to the deposit of the given account.
     * @param account - the account to add deposit to.
     */
    function depositTo(address account) external payable;

    /**
     * Withdraw from the deposit.
     * @param withdrawAddress - the address to send withdrawn value.
     * @param withdrawAmount - the amount to withdraw.
     */
    function withdrawTo(
        address payable withdrawAddress,
        uint256 withdrawAmount
    ) external;

    /**
     * Get the current nonce for the account.
     * @param sender - the account address
     * @param key - the nonce key
     */
    function getNonce(address sender, uint192 key)
        external
        view
        returns (uint256 nonce);
}

/**
 * Account interface
 */
interface IAccount {
    /**
     * Validate user's signature and nonce
     * @param userOp - the operation that is about to be executed.
     * @param userOpHash - hash of the user's request data. can be used as the basis for signature.
     * @param missingAccountFunds - missing funds on the account's deposit in the entrypoint.
     * @return validationData - signature and time-range of this operation.
     */
    function validateUserOp(
        UserOperation calldata userOp,
        bytes32 userOpHash,
        uint256 missingAccountFunds
    ) external returns (uint256 validationData);
}

/**
 * Paymaster interface
 */
interface IPaymaster {
    enum PostOpMode {
        opSucceeded,
        opReverted,
        postOpReverted
    }

    /**
     * Validate a paymaster user operation.
     * @param userOp - the user operation to validate.
     * @param userOpHash - hash of the user's request data.
     * @param maxCost - the maximum cost of this transaction (based on maximum gas and gas price from userOp)
     * @return context - value to send to a postOp. zero length to signify postOp is not required.
     * @return validationData - signature and time-range of this operation.
     */
    function validatePaymasterUserOp(
        UserOperation calldata userOp,
        bytes32 userOpHash,
        uint256 maxCost
    ) external returns (bytes memory context, uint256 validationData);

    /**
     * Post-operation handler.
     * Must verify sender is the entryPoint
     * @param mode - enum with the following options:
     *                  opSucceeded - user operation succeeded.
     *                  opReverted - user operation reverted. still has to pay for gas.
     *                  postOpReverted - user operation succeeded, but caused postOp (in mode=opSucceeded) to revert.
     *                                   Now this is the 2nd call, after user's op was deliberately reverted.
     * @param context - the context value returned by validatePaymasterUserOp
     * @param actualGasCost - actual gas used so far (without this postOp call).
     */
    function postOp(
        PostOpMode mode,
        bytes calldata context,
        uint256 actualGasCost
    ) external;
}

// IAggregator interface removed - not needed in bundler-free architecture